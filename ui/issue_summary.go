package ui

import (
	"fmt"
	"github.com/andygrunwald/go-jira"
	"github.com/fatih/color"
	"strings"
)

// IssueSummary creates a human-friendly summary of a Jira issue.
func IssueSummary(issue *jira.Issue, hasBranch bool) string {
	var colouredPriority string
	switch issue.Fields.Priority.Name {
	case "Low":
		colouredPriority = color.GreenString(issue.Fields.Priority.Name)
	case "Medium":
		colouredPriority = color.HiCyanString(issue.Fields.Priority.Name)
	case "High":
		colouredPriority = color.MagentaString(issue.Fields.Priority.Name)
	case "Critical":
		colouredPriority = color.RedString(issue.Fields.Priority.Name)
	case "Blocker":
		colouredPriority = color.RedString(issue.Fields.Priority.Name)
	default:
		colouredPriority = color.GreenString(issue.Fields.Priority.Name)
	}
	var colouredStatus string
	bracketedStatus := fmt.Sprintf("[%s]", issue.Fields.Status.Name)
	switch issue.Fields.Status.StatusCategory.ColorName {
	case "yellow":
		colouredStatus = color.YellowString(bracketedStatus)
	case "green":
		colouredStatus = color.GreenString(bracketedStatus)
	case "blue-gray":
		colouredStatus = color.HiBlueString(bracketedStatus)
	default:
		colouredStatus = color.HiBlueString(bracketedStatus)
	}
	summary := fmt.Sprintf("%s: %+v %v %v", issue.Key, issue.Fields.Summary, colouredPriority, colouredStatus)
	if hasBranch {
		summary = "*" + summary
	}
	return summary
}

// JiraKeyFromIssueSummary returns the Jira key from a summary generated by IssueSummary.
func JiraKeyFromIssueSummary(summary string) string {
	return strings.TrimPrefix(strings.Split(summary, " ")[0], "*")
}
